// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <RcppEnsmallen.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// init_LME
List init_LME(arma::field<arma::vec> Y, arma::field<arma::mat> X, arma::field<arma::mat> Z, const int maxiter, const double eps);
RcppExport SEXP _HDJM_init_LME(SEXP YSEXP, SEXP XSEXP, SEXP ZSEXP, SEXP maxiterSEXP, SEXP epsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::field<arma::vec> >::type Y(YSEXP);
    Rcpp::traits::input_parameter< arma::field<arma::mat> >::type X(XSEXP);
    Rcpp::traits::input_parameter< arma::field<arma::mat> >::type Z(ZSEXP);
    Rcpp::traits::input_parameter< const int >::type maxiter(maxiterSEXP);
    Rcpp::traits::input_parameter< const double >::type eps(epsSEXP);
    rcpp_result_gen = Rcpp::wrap(init_LME(Y, X, Z, maxiter, eps));
    return rcpp_result_gen;
END_RCPP
}
// HDJM
List HDJM(const List& datalist, const List& paralist, const arma::vec& gvec, double lam, double ridge, int maxiter, double eps);
RcppExport SEXP _HDJM_HDJM(SEXP datalistSEXP, SEXP paralistSEXP, SEXP gvecSEXP, SEXP lamSEXP, SEXP ridgeSEXP, SEXP maxiterSEXP, SEXP epsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const List& >::type datalist(datalistSEXP);
    Rcpp::traits::input_parameter< const List& >::type paralist(paralistSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type gvec(gvecSEXP);
    Rcpp::traits::input_parameter< double >::type lam(lamSEXP);
    Rcpp::traits::input_parameter< double >::type ridge(ridgeSEXP);
    Rcpp::traits::input_parameter< int >::type maxiter(maxiterSEXP);
    Rcpp::traits::input_parameter< double >::type eps(epsSEXP);
    rcpp_result_gen = Rcpp::wrap(HDJM(datalist, paralist, gvec, lam, ridge, maxiter, eps));
    return rcpp_result_gen;
END_RCPP
}
// HDJM_seq
List HDJM_seq(const List& datalist, const List& paralist, const arma::vec& gvec, int nlam, double ridge, int pmax, const double min_ratio, const int maxiter, const double eps, const bool UseSurvN);
RcppExport SEXP _HDJM_HDJM_seq(SEXP datalistSEXP, SEXP paralistSEXP, SEXP gvecSEXP, SEXP nlamSEXP, SEXP ridgeSEXP, SEXP pmaxSEXP, SEXP min_ratioSEXP, SEXP maxiterSEXP, SEXP epsSEXP, SEXP UseSurvNSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const List& >::type datalist(datalistSEXP);
    Rcpp::traits::input_parameter< const List& >::type paralist(paralistSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type gvec(gvecSEXP);
    Rcpp::traits::input_parameter< int >::type nlam(nlamSEXP);
    Rcpp::traits::input_parameter< double >::type ridge(ridgeSEXP);
    Rcpp::traits::input_parameter< int >::type pmax(pmaxSEXP);
    Rcpp::traits::input_parameter< const double >::type min_ratio(min_ratioSEXP);
    Rcpp::traits::input_parameter< const int >::type maxiter(maxiterSEXP);
    Rcpp::traits::input_parameter< const double >::type eps(epsSEXP);
    Rcpp::traits::input_parameter< const bool >::type UseSurvN(UseSurvNSEXP);
    rcpp_result_gen = Rcpp::wrap(HDJM_seq(datalist, paralist, gvec, nlam, ridge, pmax, min_ratio, maxiter, eps, UseSurvN));
    return rcpp_result_gen;
END_RCPP
}
// HDJM_raneff
List HDJM_raneff(const List& datalist, const List& paralist, double eps);
RcppExport SEXP _HDJM_HDJM_raneff(SEXP datalistSEXP, SEXP paralistSEXP, SEXP epsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const List& >::type datalist(datalistSEXP);
    Rcpp::traits::input_parameter< const List& >::type paralist(paralistSEXP);
    Rcpp::traits::input_parameter< double >::type eps(epsSEXP);
    rcpp_result_gen = Rcpp::wrap(HDJM_raneff(datalist, paralist, eps));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_HDJM_init_LME", (DL_FUNC) &_HDJM_init_LME, 5},
    {"_HDJM_HDJM", (DL_FUNC) &_HDJM_HDJM, 7},
    {"_HDJM_HDJM_seq", (DL_FUNC) &_HDJM_HDJM_seq, 10},
    {"_HDJM_HDJM_raneff", (DL_FUNC) &_HDJM_HDJM_raneff, 3},
    {NULL, NULL, 0}
};

RcppExport void R_init_HDJM(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
